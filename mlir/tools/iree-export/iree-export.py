#!/usr/bin/env python3

"""`iree-export`:
Description:
The `iree-export` tool takes an input file containing MLIR code, invokes the
`iree-compile` program and on success returns a JSON file containing:
 - The ROCm binaries generated by IREE
 - Launch parameters for each of the IREE kernels.

usage: iree-export [-h] [--iree-path <iree path>] -o <output> [-a <arch>] [-f <features>] [-v] <input>

positional arguments:
  <input>               MLIR file

optional arguments:
  -h, --help            show this help message and exit
  --iree-path <iree path>
                        IREE tools path
  -o <output>           output file
  -a <arch>, --arch <arch>
                        gpu arch
  -f <features>, --features <features>
                        gpu features
  -v, --verbose         verbose mode
"""

import argparse
import json
import os

import subprocess
from pathlib import Path
from tempfile import TemporaryDirectory

verbose = True


class IREEException(Exception): ...


def getDefaultIreePath():
    """Get the IREE_BIN path environment variable."""
    if "IREE_BIN" in os.environ:
        return os.environ["IREE_BIN"]
    return ""


def getIreeDebugFlag():
    """Get the IREE_DEBUG environment variable."""
    if "IREE_DEBUG" in os.environ:
        flag = os.environ["IREE_DEBUG"]
        if flag.isdigit():
            return int(flag) != 0
    return False


def parseArgs():
    """Parse the `iree-export` tool arguments"""
    parser = argparse.ArgumentParser(
        "iree-export",
        description="""
The `iree-export` tool takes an input file containing MLIR code, invokes the
`iree-compile` program and on success returns a JSON file containing:
 - The ROCm binaries generated by IREE
 - Launch parameters for each of the IREE kernels.
""",
    )
    parser.add_argument(
        "--iree-path",
        dest="iree_path",
        metavar="<iree path>",
        default=getDefaultIreePath(),
        type=str,
        help="IREE tools path",
    )
    parser.add_argument("input", metavar="<input>", type=str, help="MLIR file")
    parser.add_argument(
        "-o",
        dest="output",
        metavar="<output>",
        required=True,
        type=str,
        help="output file",
    )
    parser.add_argument(
        "-a",
        "--arch",
        dest="arch",
        metavar="<arch>",
        type=str,
        help="gpu arch",
    )
    parser.add_argument(
        "-f",
        "--features",
        dest="features",
        metavar="<features>",
        default="+sramecc,-xnack",
        type=str,
        help="gpu features",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbose",
        action="store_true",
        help="verbose mode",
    )
    args = parser.parse_args()
    return args


def invoke(*args):
    """Invoke a program with the given arguments"""
    status = subprocess.run([*args], capture_output=True)
    if status.returncode != 0:
        if verbose:
            print(
                "Command: `{}`\nstdout:\n{}\nstderr:\n{}".format(
                    " ".join([*args]),
                    status.stdout.decode("utf-8"),
                    status.stderr.decode("utf-8"),
                )
            )
        raise RuntimeError("invocation failed")


def ireeCC(inputFile: str, arch: str, features: str):
    """Invoke `iree-compile` and collect the binaries"""
    if not Path(inputFile).exists():
        raise IREEException("invalid input file: {}".format(inputFile))
    if len(arch) == 0:
        raise IREEException("invalid gpu arch")
    with TemporaryDirectory() as tmpDir:
        dir = Path(tmpDir)
        ireeFile = dir.joinpath("iree.mlir")
        invoke(
            "iree-compile",
            "--iree-hal-target-backends=rocm",
            "--iree-rocm-target-chip={}".format(arch),
            "--iree-hal-dump-executable-binaries-to={0}".format(dir),
            "--iree-rocm-target-features={0}".format(features),
            "--compile-to=hal",
            "-o",
            "{0}".format(ireeFile),
            inputFile,
        )
        if not ireeFile.exists():
            raise IREEException("`iree-compile` invocation failed")
        attrs = {}
        with open(ireeFile, "r") as file:
            attrs["MLIR"] = file.readlines()
        bins = []
        for bin in dir.glob("*.json"):
            with open(bin, "r") as file:
                bins.append(json.load(file))
        attrs["binaries"] = bins

    return attrs


def main():
    global verbose
    args = parseArgs()
    verbose = args.verbose or getIreeDebugFlag()
    if Path(args.iree_path).exists():
        os.environ["PATH"] += os.pathsep + args.iree_path
    attrs = {}
    try:
        attrs = ireeCC(args.input, args.arch, args.features)
    except Exception as exc:
        if verbose:
            print(str(exc))
        attrs["error"] = str(exc)
    if verbose:
        if "binaries" in attrs:
            print("[iree-export]: number of kernels: {}".format(len(attrs["binaries"])))
        else:
            print("[iree-export]: number of kernels: 0")
    with open(args.output, "w") as outputFile:
        print(json.dumps(attrs, indent=2), file=outputFile)


if __name__ == "__main__":
    main()
